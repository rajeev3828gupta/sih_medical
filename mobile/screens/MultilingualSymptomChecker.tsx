import React, { useState, useEffect } from 'react';
import {
  View,
  Text,
  ScrollView,
  TextInput,
  TouchableOpacity,
  Alert,
  StyleSheet,
  ActivityIndicator,
} from 'react-native';

interface MultilingualSymptomCheckerProps {
  navigation: any;
}

interface SymptomAnalysis {
  possibleConditions: Array<{
    condition: string;
    probability: number;
    description: string;
    recommendation: string;
    severity: string;
    duration: string;
  }>;
  overallSeverity: string;
  urgency: string;
  generalRecommendations: string[];
  warningSigns: string[];
  consultDoctor: string;
  language: string;
}

const MultilingualSymptomChecker: React.FC<MultilingualSymptomCheckerProps> = ({ navigation }) => {
  const [currentLanguage, setCurrentLanguage] = useState('en');
  const [symptoms, setSymptoms] = useState('');
  const [selectedSymptoms, setSelectedSymptoms] = useState<string[]>([]);
  const [analysis, setAnalysis] = useState<SymptomAnalysis | null>(null);
  const [isAnalyzing, setIsAnalyzing] = useState(false);

  const languages = [
    { code: 'en', name: 'English', flag: 'üá∫üá∏' },
    { code: 'hi', name: '‡§π‡§ø‡§Ç‡§¶‡•Ä', flag: 'üáÆüá≥' },
    { code: 'pa', name: '‡®™‡©∞‡®ú‡®æ‡®¨‡©Ä', flag: 'üáÆüá≥' },
  ];

  const translations = {
    en: {
      title: 'AI Health Assistant',
      subtitle: 'Describe your symptoms for preliminary analysis',
      disclaimer: '‚ö†Ô∏è This is not a substitute for professional medical advice. Always consult a healthcare provider for accurate diagnosis.',
      describeSymptoms: 'Describe Your Symptoms',
      placeholder: 'Please describe your symptoms in detail...',
      commonSymptoms: 'Common Symptoms',
      selectSymptoms: 'Tap to select symptoms you\'re experiencing',
      analyzeButton: 'ü©∫ Analyze Symptoms',
      analyzing: 'ü§ñ Analyzing Symptoms...',
      bookConsultation: 'Book Consultation',
      emergencySymptoms: [
        'ü§í Fever', 'ü§ß Cough', 'ü§¢ Headache', 'üíî Body Ache',
        'ü§¢ Nausea', 'üòµ Dizziness', 'üò¥ Fatigue', 'ü¶∑ Tooth Pain',
        'üíî Chest Pain', 'ü§≤ Joint Pain', 'üëÅÔ∏è Eye Pain', 'üëÇ Ear Pain',
        'ü§∞ Abdominal Pain', 'ü¶µ Leg Pain', 'üó£Ô∏è Sore Throat', 'üå°Ô∏è Chills'
      ]
    },
    hi: {
      title: '‡§è‡§Ü‡§à ‡§∏‡•ç‡§µ‡§æ‡§∏‡•ç‡§•‡•ç‡§Ø ‡§∏‡§π‡§æ‡§Ø‡§ï',
      subtitle: '‡§™‡•ç‡§∞‡§æ‡§∞‡§Ç‡§≠‡§ø‡§ï ‡§µ‡§ø‡§∂‡•ç‡§≤‡•á‡§∑‡§£ ‡§ï‡•á ‡§≤‡§ø‡§è ‡§Ö‡§™‡§®‡•á ‡§≤‡§ï‡•ç‡§∑‡§£‡•ã‡§Ç ‡§ï‡§æ ‡§µ‡§∞‡•ç‡§£‡§® ‡§ï‡§∞‡•á‡§Ç',
      disclaimer: '‚ö†Ô∏è ‡§Ø‡§π ‡§™‡•á‡§∂‡•á‡§µ‡§∞ ‡§ö‡§ø‡§ï‡§ø‡§§‡•ç‡§∏‡§æ ‡§∏‡§≤‡§æ‡§π ‡§ï‡§æ ‡§µ‡§ø‡§ï‡§≤‡•ç‡§™ ‡§®‡§π‡•Ä‡§Ç ‡§π‡•à‡•§ ‡§∏‡§ü‡•Ä‡§ï ‡§®‡§ø‡§¶‡§æ‡§® ‡§ï‡•á ‡§≤‡§ø‡§è ‡§π‡§Æ‡•á‡§∂‡§æ ‡§∏‡•ç‡§µ‡§æ‡§∏‡•ç‡§•‡•ç‡§Ø ‡§∏‡•á‡§µ‡§æ ‡§™‡•ç‡§∞‡§¶‡§æ‡§§‡§æ ‡§∏‡•á ‡§∏‡§≤‡§æ‡§π ‡§≤‡•á‡§Ç‡•§',
      describeSymptoms: '‡§Ö‡§™‡§®‡•á ‡§≤‡§ï‡•ç‡§∑‡§£‡•ã‡§Ç ‡§ï‡§æ ‡§µ‡§∞‡•ç‡§£‡§® ‡§ï‡§∞‡•á‡§Ç',
      placeholder: '‡§ï‡•É‡§™‡§Ø‡§æ ‡§Ö‡§™‡§®‡•á ‡§≤‡§ï‡•ç‡§∑‡§£‡•ã‡§Ç ‡§ï‡§æ ‡§µ‡§ø‡§∏‡•ç‡§§‡§æ‡§∞ ‡§∏‡•á ‡§µ‡§∞‡•ç‡§£‡§® ‡§ï‡§∞‡•á‡§Ç...',
      commonSymptoms: '‡§∏‡§æ‡§Æ‡§æ‡§®‡•ç‡§Ø ‡§≤‡§ï‡•ç‡§∑‡§£',
      selectSymptoms: '‡§Ü‡§™ ‡§ú‡•ã ‡§≤‡§ï‡•ç‡§∑‡§£ ‡§Æ‡§π‡§∏‡•Ç‡§∏ ‡§ï‡§∞ ‡§∞‡§π‡•á ‡§π‡•à‡§Ç ‡§â‡§®‡•ç‡§π‡•á‡§Ç ‡§ö‡•Å‡§®‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§ü‡•à‡§™ ‡§ï‡§∞‡•á‡§Ç',
      analyzeButton: 'ü©∫ ‡§≤‡§ï‡•ç‡§∑‡§£‡•ã‡§Ç ‡§ï‡§æ ‡§µ‡§ø‡§∂‡•ç‡§≤‡•á‡§∑‡§£ ‡§ï‡§∞‡•á‡§Ç',
      analyzing: 'ü§ñ ‡§≤‡§ï‡•ç‡§∑‡§£‡•ã‡§Ç ‡§ï‡§æ ‡§µ‡§ø‡§∂‡•ç‡§≤‡•á‡§∑‡§£ ‡§ï‡§∞ ‡§∞‡§π‡•á ‡§π‡•à‡§Ç...',
      bookConsultation: '‡§™‡§∞‡§æ‡§Æ‡§∞‡•ç‡§∂ ‡§¨‡•Å‡§ï ‡§ï‡§∞‡•á‡§Ç',
      emergencySymptoms: [
        'ü§í ‡§¨‡•Å‡§ñ‡§æ‡§∞', 'ü§ß ‡§ñ‡§æ‡§Ç‡§∏‡•Ä', 'ü§¢ ‡§∏‡§ø‡§∞‡§¶‡§∞‡•ç‡§¶', 'üíî ‡§∂‡§∞‡•Ä‡§∞ ‡§Æ‡•á‡§Ç ‡§¶‡§∞‡•ç‡§¶',
        'ü§¢ ‡§Æ‡§§‡§≤‡•Ä', 'üòµ ‡§ö‡§ï‡•ç‡§ï‡§∞ ‡§Ü‡§®‡§æ', 'üò¥ ‡§•‡§ï‡§æ‡§®', 'ü¶∑ ‡§¶‡§æ‡§Ç‡§§ ‡§¶‡§∞‡•ç‡§¶',
        'üíî ‡§õ‡§æ‡§§‡•Ä ‡§Æ‡•á‡§Ç ‡§¶‡§∞‡•ç‡§¶', 'ü§≤ ‡§ú‡•ã‡§°‡§º‡•ã‡§Ç ‡§ï‡§æ ‡§¶‡§∞‡•ç‡§¶', 'üëÅÔ∏è ‡§Ü‡§Ç‡§ñ ‡§ï‡§æ ‡§¶‡§∞‡•ç‡§¶', 'üëÇ ‡§ï‡§æ‡§® ‡§ï‡§æ ‡§¶‡§∞‡•ç‡§¶',
        'ü§∞ ‡§™‡•á‡§ü ‡§¶‡§∞‡•ç‡§¶', 'ü¶µ ‡§™‡•à‡§∞ ‡§ï‡§æ ‡§¶‡§∞‡•ç‡§¶', 'üó£Ô∏è ‡§ó‡§≤‡§æ ‡§ñ‡§∞‡§æ‡§¨', 'üå°Ô∏è ‡§ï‡§Ç‡§™‡§ï‡§Ç‡§™‡•Ä'
      ]
    },
    pa: {
      title: '‡®è‡®Ü‡®à ‡®∏‡®ø‡®π‡®§ ‡®∏‡®π‡®æ‡®á‡®ï',
      subtitle: '‡®∏‡®º‡©Å‡®∞‡©Ç‡®Ü‡®§‡©Ä ‡®µ‡®ø‡®∏‡®º‡®≤‡©á‡®∏‡®º‡®£ ‡®≤‡®à ‡®Ü‡®™‡®£‡©á ‡®≤‡©±‡®õ‡®£‡®æ‡®Ç ‡®¶‡®æ ‡®µ‡®∞‡®£‡®® ‡®ï‡®∞‡©ã',
      disclaimer: '‚ö†Ô∏è ‡®á‡®π ‡®™‡©á‡®∏‡®º‡©á‡®µ‡®∞ ‡®Æ‡©à‡®°‡©Ä‡®ï‡®≤ ‡®∏‡®≤‡®æ‡®π ‡®¶‡®æ ‡®¨‡®¶‡®≤ ‡®®‡®π‡©Ä‡®Ç ‡®π‡©à‡•§ ‡®∏‡®π‡©Ä ‡®®‡®ø‡®¶‡®æ‡®® ‡®≤‡®à ‡®π‡®Æ‡©á‡®∏‡®º‡®æ ‡®∏‡®ø‡®π‡®§ ‡®∏‡©á‡®µ‡®æ ‡®™‡©ç‡®∞‡®¶‡®æ‡®§‡®æ ‡®®‡®æ‡®≤ ‡®∏‡®≤‡®æ‡®π ‡®ï‡®∞‡©ã‡•§',
      describeSymptoms: '‡®Ü‡®™‡®£‡©á ‡®≤‡©±‡®õ‡®£‡®æ‡®Ç ‡®¶‡®æ ‡®µ‡®∞‡®£‡®® ‡®ï‡®∞‡©ã',
      placeholder: '‡®ï‡®ø‡®∞‡®™‡®æ ‡®ï‡®∞‡®ï‡©á ‡®Ü‡®™‡®£‡©á ‡®≤‡©±‡®õ‡®£‡®æ‡®Ç ‡®¶‡®æ ‡®µ‡®ø‡®∏‡®§‡®æ‡®∞ ‡®®‡®æ‡®≤ ‡®µ‡®∞‡®£‡®® ‡®ï‡®∞‡©ã...',
      commonSymptoms: '‡®Ü‡®Æ ‡®≤‡©±‡®õ‡®£',
      selectSymptoms: '‡®ú‡©ã ‡®≤‡©±‡®õ‡®£ ‡®§‡©Å‡®∏‡©Ä‡®Ç ‡®Æ‡®π‡®ø‡®∏‡©Ç‡®∏ ‡®ï‡®∞ ‡®∞‡®π‡©á ‡®π‡©ã ‡®â‡®®‡©ç‡®π‡®æ‡®Ç ‡®®‡©Ç‡©∞ ‡®ö‡©Å‡®£‡®® ‡®≤‡®à ‡®ü‡©à‡®™ ‡®ï‡®∞‡©ã',
      analyzeButton: 'ü©∫ ‡®≤‡©±‡®õ‡®£‡®æ‡®Ç ‡®¶‡®æ ‡®µ‡®ø‡®∏‡®º‡®≤‡©á‡®∏‡®º‡®£ ‡®ï‡®∞‡©ã',
      analyzing: 'ü§ñ ‡®≤‡©±‡®õ‡®£‡®æ‡®Ç ‡®¶‡®æ ‡®µ‡®ø‡®∏‡®º‡®≤‡©á‡®∏‡®º‡®£ ‡®ï‡®∞ ‡®∞‡®π‡©á ‡®π‡®æ‡®Ç...',
      bookConsultation: '‡®∏‡®≤‡®æ‡®π ‡®¨‡©Å‡©±‡®ï ‡®ï‡®∞‡©ã',
      emergencySymptoms: [
        'ü§í ‡®¨‡©Å‡®ñ‡®æ‡®∞', 'ü§ß ‡®ñ‡©∞‡®ò', 'ü§¢ ‡®∏‡®ø‡®∞ ‡®¶‡®∞‡®¶', 'üíî ‡®∏‡®∞‡©Ä‡®∞ ‡®µ‡®ø‡©±‡®ö ‡®¶‡®∞‡®¶',
        'ü§¢ ‡®Æ‡®§‡®≤‡©Ä', 'üòµ ‡®ö‡©±‡®ï‡®∞ ‡®Ü‡®â‡®£‡®æ', 'üò¥ ‡®•‡®ï‡®æ‡®µ‡®ü', 'ü¶∑ ‡®¶‡©∞‡®¶ ‡®¶‡®∞‡®¶',
        'üíî ‡®õ‡®æ‡®§‡©Ä ‡®µ‡®ø‡©±‡®ö ‡®¶‡®∞‡®¶', 'ü§≤ ‡®ú‡©ã‡©ú‡®æ‡®Ç ‡®¶‡®æ ‡®¶‡®∞‡®¶', 'üëÅÔ∏è ‡®Ö‡©±‡®ñ ‡®¶‡®æ ‡®¶‡®∞‡®¶', 'üëÇ ‡®ï‡©∞‡®® ‡®¶‡®æ ‡®¶‡®∞‡®¶',
        'ü§∞ ‡®™‡©á‡®ü ‡®¶‡®∞‡®¶', 'ü¶µ ‡®≤‡©±‡®§ ‡®¶‡®æ ‡®¶‡®∞‡®¶', 'üó£Ô∏è ‡®ó‡®≤‡®æ ‡®ñ‡®∞‡®æ‡®¨', 'üå°Ô∏è ‡®ï‡©∞‡®¨‡®£‡©Ä'
      ]
    }
  };

  const currentTranslation = translations[currentLanguage as keyof typeof translations];

  const handleSymptomSelect = (symptom: string) => {
    if (selectedSymptoms.includes(symptom)) {
      setSelectedSymptoms(selectedSymptoms.filter(s => s !== symptom));
    } else {
      setSelectedSymptoms([...selectedSymptoms, symptom]);
    }
  };

  const handleAnalyzeSymptoms = async () => {
    if (!symptoms.trim() && selectedSymptoms.length === 0) {
      Alert.alert('No Symptoms', 'Please describe your symptoms or select from common symptoms.');
      return;
    }

    setIsAnalyzing(true);
    
    try {
      // Simulate AI analysis with multilingual response
      setTimeout(() => {
        const mockAnalysis: SymptomAnalysis = {
          possibleConditions: [
            {
              condition: currentLanguage === 'en' ? 'Common Cold' : 
                        currentLanguage === 'hi' ? '‡§∏‡§æ‡§Æ‡§æ‡§®‡•ç‡§Ø ‡§∏‡§∞‡•ç‡§¶‡•Ä' : '‡®Ü‡®Æ ‡®†‡©∞‡®°',
              probability: 75,
              description: currentLanguage === 'en' ? 'Viral infection affecting nose and throat' : 
                          currentLanguage === 'hi' ? '‡§®‡§æ‡§ï ‡§î‡§∞ ‡§ó‡§≤‡•á ‡§ï‡•ã ‡§™‡•ç‡§∞‡§≠‡§æ‡§µ‡§ø‡§§ ‡§ï‡§∞‡§®‡•á ‡§µ‡§æ‡§≤‡§æ ‡§µ‡§æ‡§Ø‡§∞‡§≤ ‡§∏‡§Ç‡§ï‡•ç‡§∞‡§Æ‡§£' : 
                          '‡®®‡©±‡®ï ‡®Ö‡®§‡©á ‡®ó‡®≤‡©á ‡®®‡©Ç‡©∞ ‡®™‡©ç‡®∞‡®≠‡®æ‡®µ‡®ø‡®§ ‡®ï‡®∞‡®® ‡®µ‡®æ‡®≤‡®æ ‡®µ‡®æ‡®á‡®∞‡®≤ ‡®á‡®®‡®´‡©à‡®ï‡®∏‡®º‡®®',
              recommendation: currentLanguage === 'en' ? 'Rest, fluids, and symptom management' : 
                             currentLanguage === 'hi' ? '‡§Ü‡§∞‡§æ‡§Æ, ‡§§‡§∞‡§≤ ‡§™‡§¶‡§æ‡§∞‡•ç‡§•, ‡§î‡§∞ ‡§≤‡§ï‡•ç‡§∑‡§£ ‡§™‡•ç‡§∞‡§¨‡§Ç‡§ß‡§®' : 
                             '‡®Ü‡®∞‡®æ‡®Æ, ‡®§‡®∞‡®≤ ‡®™‡®¶‡®æ‡®∞‡®•, ‡®Ö‡®§‡©á ‡®≤‡©±‡®õ‡®£ ‡®™‡©ç‡®∞‡®¨‡©∞‡®ß‡®®',
              severity: 'Mild',
              duration: '7-10 days',
            },
          ],
          overallSeverity: 'Mild to Moderate',
          urgency: 'Non-urgent',
          generalRecommendations: currentLanguage === 'en' ? [
            'üõå Get adequate rest and sleep',
            'üíß Stay well hydrated',
            'üçä Maintain a healthy diet',
            'üå°Ô∏è Monitor your temperature',
            'üò∑ Practice good hygiene',
            'üè† Avoid close contact with others'
          ] : currentLanguage === 'hi' ? [
            'üõå ‡§™‡§∞‡•ç‡§Ø‡§æ‡§™‡•ç‡§§ ‡§Ü‡§∞‡§æ‡§Æ ‡§î‡§∞ ‡§®‡•Ä‡§Ç‡§¶ ‡§≤‡•á‡§Ç',
            'üíß ‡§Ö‡§ö‡•ç‡§õ‡•Ä ‡§§‡§∞‡§π ‡§∏‡•á ‡§π‡§æ‡§á‡§°‡•ç‡§∞‡•á‡§ü‡•á‡§° ‡§∞‡§π‡•á‡§Ç',
            'üçä ‡§∏‡•ç‡§µ‡§∏‡•ç‡§• ‡§Ü‡§π‡§æ‡§∞ ‡§¨‡§®‡§æ‡§è ‡§∞‡§ñ‡•á‡§Ç',
            'üå°Ô∏è ‡§Ö‡§™‡§®‡•á ‡§§‡§æ‡§™‡§Æ‡§æ‡§® ‡§ï‡•Ä ‡§®‡§ø‡§ó‡§∞‡§æ‡§®‡•Ä ‡§ï‡§∞‡•á‡§Ç',
            'üò∑ ‡§Ö‡§ö‡•ç‡§õ‡•Ä ‡§∏‡•ç‡§µ‡§ö‡•ç‡§õ‡§§‡§æ ‡§ï‡§æ ‡§Ö‡§≠‡•ç‡§Ø‡§æ‡§∏ ‡§ï‡§∞‡•á‡§Ç',
            'üè† ‡§¶‡•Ç‡§∏‡§∞‡•ã‡§Ç ‡§ï‡•á ‡§∏‡§æ‡§• ‡§®‡§ø‡§ï‡§ü ‡§∏‡§Ç‡§™‡§∞‡•ç‡§ï ‡§∏‡•á ‡§¨‡§ö‡•á‡§Ç'
          ] : [
            'üõå ‡®≤‡©ã‡©ú‡©Ä‡®Ç‡®¶‡®æ ‡®Ü‡®∞‡®æ‡®Æ ‡®Ö‡®§‡©á ‡®®‡©Ä‡®Ç‡®¶ ‡®≤‡®ì',
            'üíß ‡®ö‡©∞‡®ó‡©Ä ‡®§‡®∞‡©ç‡®π‡®æ‡®Ç ‡®π‡®æ‡®à‡®°‡©ç‡®∞‡©á‡®ü ‡®∞‡®π‡©ã',
            'üçä ‡®∏‡®ø‡®π‡®§‡®Æ‡©∞‡®¶ ‡®Ü‡®π‡®æ‡®∞ ‡®¨‡®£‡®æ‡®à ‡®∞‡©±‡®ñ‡©ã',
            'üå°Ô∏è ‡®Ü‡®™‡®£‡©á ‡®§‡®æ‡®™‡®Æ‡®æ‡®® ‡®¶‡©Ä ‡®®‡®ø‡®ó‡®∞‡®æ‡®®‡©Ä ‡®ï‡®∞‡©ã',
            'üò∑ ‡®ö‡©∞‡®ó‡©Ä ‡®∏‡®´‡®æ‡®à ‡®¶‡®æ ‡®Ö‡®≠‡®ø‡®Ü‡®∏ ‡®ï‡®∞‡©ã',
            'üè† ‡®¶‡©Ç‡®ú‡®ø‡®Ü‡®Ç ‡®®‡®æ‡®≤ ‡®®‡®ú‡®º‡®¶‡©Ä‡®ï‡©Ä ‡®∏‡©∞‡®™‡®∞‡®ï ‡®§‡©ã‡®Ç ‡®¨‡®ö‡©ã'
          ],
          warningSigns: currentLanguage === 'en' ? [
            'High fever (>101.3¬∞F)',
            'Difficulty breathing',
            'Severe chest pain',
            'Persistent vomiting',
            'Signs of dehydration'
          ] : currentLanguage === 'hi' ? [
            '‡§§‡•á‡§ú‡§º ‡§¨‡•Å‡§ñ‡§æ‡§∞ (>101.3¬∞F)',
            '‡§∏‡§æ‡§Ç‡§∏ ‡§≤‡•á‡§®‡•á ‡§Æ‡•á‡§Ç ‡§ï‡§†‡§ø‡§®‡§æ‡§à',
            '‡§ó‡§Ç‡§≠‡•Ä‡§∞ ‡§õ‡§æ‡§§‡•Ä ‡§¶‡§∞‡•ç‡§¶',
            '‡§≤‡§ó‡§æ‡§§‡§æ‡§∞ ‡§â‡§≤‡•ç‡§ü‡•Ä',
            '‡§®‡§ø‡§∞‡•ç‡§ú‡§≤‡•Ä‡§ï‡§∞‡§£ ‡§ï‡•á ‡§∏‡§Ç‡§ï‡•á‡§§'
          ] : [
            '‡®§‡©á‡®ú‡®º ‡®¨‡©Å‡®ñ‡®æ‡®∞ (>101.3¬∞F)',
            '‡®∏‡®æ‡®π ‡®≤‡©à‡®£ ‡®µ‡®ø‡©±‡®ö ‡®Æ‡©Å‡®∏‡®º‡®ï‡®≤',
            '‡®ó‡©∞‡®≠‡©Ä‡®∞ ‡®õ‡®æ‡®§‡©Ä ‡®¶‡®∞‡®¶',
            '‡®≤‡®ó‡®æ‡®§‡®æ‡®∞ ‡®â‡®≤‡®ü‡©Ä',
            '‡®™‡®æ‡®£‡©Ä ‡®¶‡©Ä ‡®ï‡®Æ‡©Ä ‡®¶‡©á ‡®∏‡©∞‡®ï‡©á‡®§'
          ],
          consultDoctor: currentLanguage === 'en' ? 
            'Consider consulting a healthcare provider if symptoms worsen or persist.' :
            currentLanguage === 'hi' ? 
            '‡§Ø‡§¶‡§ø ‡§≤‡§ï‡•ç‡§∑‡§£ ‡§¨‡§ø‡§ó‡§°‡§º‡§§‡•á ‡§π‡•à‡§Ç ‡§Ø‡§æ ‡§¨‡§®‡•á ‡§∞‡§π‡§§‡•á ‡§π‡•à‡§Ç ‡§§‡•ã ‡§∏‡•ç‡§µ‡§æ‡§∏‡•ç‡§•‡•ç‡§Ø ‡§∏‡•á‡§µ‡§æ ‡§™‡•ç‡§∞‡§¶‡§æ‡§§‡§æ ‡§∏‡•á ‡§∏‡§≤‡§æ‡§π ‡§≤‡•á‡§®‡•á ‡§™‡§∞ ‡§µ‡§ø‡§ö‡§æ‡§∞ ‡§ï‡§∞‡•á‡§Ç‡•§' :
            '‡®ú‡©á ‡®≤‡©±‡®õ‡®£ ‡®µ‡®ø‡®ó‡©ú‡®¶‡©á ‡®π‡®® ‡®ú‡®æ‡®Ç ‡®¨‡®£‡©á ‡®∞‡®π‡®ø‡©∞‡®¶‡©á ‡®π‡®® ‡®§‡®æ‡®Ç ‡®∏‡®ø‡®π‡®§ ‡®∏‡©á‡®µ‡®æ ‡®™‡©ç‡®∞‡®¶‡®æ‡®§‡®æ ‡®®‡®æ‡®≤ ‡®∏‡®≤‡®æ‡®π ‡®ï‡®∞‡®® ‡®¨‡®æ‡®∞‡©á ‡®∏‡©ã‡®ö‡©ã‡•§',
          language: currentLanguage,
        };
        
        setAnalysis(mockAnalysis);
        setIsAnalyzing(false);
      }, 2000);
    } catch (error) {
      console.error('Symptom analysis error:', error);
      setIsAnalyzing(false);
      Alert.alert('Error', 'Failed to analyze symptoms. Please try again.');
    }
  };

  return (
    <ScrollView style={styles.container} showsVerticalScrollIndicator={false}>
      {/* Header with Language Selector */}
      <View style={styles.header}>
        <Text style={styles.headerTitle}>{currentTranslation.title}</Text>
        <Text style={styles.headerSubtitle}>{currentTranslation.subtitle}</Text>
        
        {/* Language Selector */}
        <View style={styles.languageContainer}>
          {languages.map((lang) => (
            <TouchableOpacity
              key={lang.code}
              style={[
                styles.languageButton,
                currentLanguage === lang.code && styles.selectedLanguage
              ]}
              onPress={() => setCurrentLanguage(lang.code)}
            >
              <Text style={styles.languageFlag}>{lang.flag}</Text>
              <Text style={[
                styles.languageText,
                currentLanguage === lang.code && styles.selectedLanguageText
              ]}>
                {lang.name}
              </Text>
            </TouchableOpacity>
          ))}
        </View>

        <View style={styles.disclaimer}>
          <Text style={styles.disclaimerText}>{currentTranslation.disclaimer}</Text>
        </View>
      </View>

      {/* Symptom Input */}
      <View style={styles.section}>
        <Text style={styles.sectionTitle}>{currentTranslation.describeSymptoms}</Text>
        <TextInput
          style={styles.textInput}
          placeholder={currentTranslation.placeholder}
          placeholderTextColor="#94A3B8"
          value={symptoms}
          onChangeText={setSymptoms}
          multiline
          numberOfLines={4}
          textAlignVertical="top"
        />
      </View>

      {/* Common Symptoms */}
      <View style={styles.section}>
        <Text style={styles.sectionTitle}>{currentTranslation.commonSymptoms}</Text>
        <Text style={styles.sectionSubtitle}>{currentTranslation.selectSymptoms}</Text>
        <View style={styles.symptomsGrid}>
          {currentTranslation.emergencySymptoms.map((symptom, index) => (
            <TouchableOpacity
              key={index}
              style={[
                styles.symptomChip,
                selectedSymptoms.includes(symptom) && styles.selectedSymptomChip
              ]}
              onPress={() => handleSymptomSelect(symptom)}
            >
              <Text style={[
                styles.symptomText,
                selectedSymptoms.includes(symptom) && styles.selectedSymptomText
              ]}>
                {symptom}
              </Text>
            </TouchableOpacity>
          ))}
        </View>
      </View>

      {/* Analyze Button */}
      <View style={styles.section}>
        <TouchableOpacity
          style={[styles.analyzeButton, isAnalyzing && styles.analyzingButton]}
          onPress={handleAnalyzeSymptoms}
          disabled={isAnalyzing}
        >
          {isAnalyzing ? (
            <ActivityIndicator color="#FFFFFF" size="small" />
          ) : null}
          <Text style={styles.analyzeButtonText}>
            {isAnalyzing ? currentTranslation.analyzing : currentTranslation.analyzeButton}
          </Text>
        </TouchableOpacity>
      </View>

      {/* Analysis Results */}
      {analysis && (
        <View style={styles.resultsContainer}>
          <Text style={styles.resultsTitle}>
            {currentLanguage === 'en' ? 'Analysis Results' : 
             currentLanguage === 'hi' ? '‡§µ‡§ø‡§∂‡•ç‡§≤‡•á‡§∑‡§£ ‡§™‡§∞‡§ø‡§£‡§æ‡§Æ' : 
             '‡®µ‡®ø‡®∏‡®º‡®≤‡©á‡®∏‡®º‡®£ ‡®®‡®§‡©Ä‡®ú‡©á'}
          </Text>

          {/* Possible Conditions */}
          {analysis.possibleConditions.map((condition, index) => (
            <View key={index} style={styles.conditionCard}>
              <View style={styles.conditionHeader}>
                <Text style={styles.conditionName}>{condition.condition}</Text>
                <Text style={styles.conditionProbability}>{condition.probability}%</Text>
              </View>
              <Text style={styles.conditionDescription}>{condition.description}</Text>
              <Text style={styles.conditionRecommendation}>{condition.recommendation}</Text>
            </View>
          ))}

          {/* General Recommendations */}
          <View style={styles.recommendationsCard}>
            <Text style={styles.recommendationsTitle}>
              {currentLanguage === 'en' ? 'General Recommendations' : 
               currentLanguage === 'hi' ? '‡§∏‡§æ‡§Æ‡§æ‡§®‡•ç‡§Ø ‡§∏‡§ø‡§´‡§æ‡§∞‡§ø‡§∂‡•á‡§Ç' : 
               '‡®Ü‡®Æ ‡®∏‡®ø‡®´‡®æ‡®∞‡®∏‡®º‡®æ‡®Ç'}
            </Text>
            {analysis.generalRecommendations.map((rec, index) => (
              <Text key={index} style={styles.recommendationText}>‚Ä¢ {rec}</Text>
            ))}
          </View>

          {/* Warning Signs */}
          <View style={styles.warningCard}>
            <Text style={styles.warningTitle}>
              {currentLanguage === 'en' ? '‚ö†Ô∏è Seek Immediate Medical Attention If:' : 
               currentLanguage === 'hi' ? '‚ö†Ô∏è ‡§§‡§§‡•ç‡§ï‡§æ‡§≤ ‡§ö‡§ø‡§ï‡§ø‡§§‡•ç‡§∏‡§æ ‡§∏‡§π‡§æ‡§Ø‡§§‡§æ ‡§≤‡•á‡§Ç ‡§Ø‡§¶‡§ø:' : 
               '‚ö†Ô∏è ‡®§‡©Å‡®∞‡©∞‡®§ ‡®Æ‡©à‡®°‡©Ä‡®ï‡®≤ ‡®∏‡®π‡®æ‡®á‡®§‡®æ ‡®≤‡®ì ‡®ú‡©á:'}
            </Text>
            {analysis.warningSigns.map((warning, index) => (
              <Text key={index} style={styles.warningText}>‚Ä¢ {warning}</Text>
            ))}
          </View>

          {/* Doctor Consultation */}
          <View style={styles.consultationCard}>
            <Text style={styles.consultationTitle}>üë©‚Äç‚öïÔ∏è {currentTranslation.bookConsultation}</Text>
            <Text style={styles.consultationText}>{analysis.consultDoctor}</Text>
            <TouchableOpacity
              style={styles.consultButton}
              onPress={() => navigation.navigate('Consultation')}
            >
              <Text style={styles.consultButtonText}>{currentTranslation.bookConsultation}</Text>
            </TouchableOpacity>
          </View>
        </View>
      )}
    </ScrollView>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#F8FAFC',
  },
  header: {
    backgroundColor: '#FFFFFF',
    paddingHorizontal: 20,
    paddingTop: 20,
    paddingBottom: 24,
    borderBottomWidth: 1,
    borderBottomColor: '#E2E8F0',
  },
  headerTitle: {
    fontSize: 28,
    fontWeight: '700',
    color: '#1E293B',
    marginBottom: 8,
    textAlign: 'center',
  },
  headerSubtitle: {
    fontSize: 16,
    color: '#64748B',
    textAlign: 'center',
    marginBottom: 20,
  },
  languageContainer: {
    flexDirection: 'row',
    justifyContent: 'center',
    marginBottom: 20,
    gap: 8,
  },
  languageButton: {
    flexDirection: 'row',
    alignItems: 'center',
    paddingHorizontal: 12,
    paddingVertical: 8,
    borderRadius: 20,
    backgroundColor: '#F1F5F9',
    borderWidth: 1,
    borderColor: '#E2E8F0',
  },
  selectedLanguage: {
    backgroundColor: '#EFF6FF',
    borderColor: '#0EA5E9',
  },
  languageFlag: {
    fontSize: 16,
    marginRight: 6,
  },
  languageText: {
    fontSize: 14,
    color: '#64748B',
    fontWeight: '500',
  },
  selectedLanguageText: {
    color: '#0EA5E9',
    fontWeight: '600',
  },
  disclaimer: {
    backgroundColor: '#FEF3C7',
    padding: 16,
    borderRadius: 12,
    borderWidth: 1,
    borderColor: '#F59E0B',
  },
  disclaimerText: {
    fontSize: 12,
    color: '#92400E',
    lineHeight: 16,
    textAlign: 'center',
  },
  section: {
    paddingHorizontal: 20,
    paddingVertical: 20,
  },
  sectionTitle: {
    fontSize: 20,
    fontWeight: '700',
    color: '#1E293B',
    marginBottom: 8,
  },
  sectionSubtitle: {
    fontSize: 14,
    color: '#64748B',
    marginBottom: 16,
  },
  textInput: {
    backgroundColor: '#FFFFFF',
    borderWidth: 1,
    borderColor: '#E2E8F0',
    borderRadius: 12,
    padding: 16,
    fontSize: 16,
    color: '#1E293B',
    minHeight: 100,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.05,
    shadowRadius: 8,
    elevation: 2,
  },
  symptomsGrid: {
    flexDirection: 'row',
    flexWrap: 'wrap',
    gap: 8,
  },
  symptomChip: {
    backgroundColor: '#FFFFFF',
    paddingHorizontal: 12,
    paddingVertical: 8,
    borderRadius: 20,
    borderWidth: 1,
    borderColor: '#E2E8F0',
    marginBottom: 8,
  },
  selectedSymptomChip: {
    backgroundColor: '#EFF6FF',
    borderColor: '#0EA5E9',
  },
  symptomText: {
    fontSize: 14,
    color: '#64748B',
    fontWeight: '500',
  },
  selectedSymptomText: {
    color: '#0EA5E9',
    fontWeight: '600',
  },
  analyzeButton: {
    backgroundColor: '#0EA5E9',
    paddingVertical: 16,
    borderRadius: 12,
    alignItems: 'center',
    flexDirection: 'row',
    justifyContent: 'center',
    shadowColor: '#0EA5E9',
    shadowOffset: { width: 0, height: 4 },
    shadowOpacity: 0.3,
    shadowRadius: 8,
    elevation: 4,
  },
  analyzingButton: {
    backgroundColor: '#64748B',
  },
  analyzeButtonText: {
    color: '#FFFFFF',
    fontSize: 18,
    fontWeight: '600',
    marginLeft: 8,
  },
  resultsContainer: {
    paddingHorizontal: 20,
    paddingBottom: 40,
  },
  resultsTitle: {
    fontSize: 24,
    fontWeight: '700',
    color: '#1E293B',
    marginBottom: 20,
    textAlign: 'center',
  },
  conditionCard: {
    backgroundColor: '#FFFFFF',
    padding: 20,
    borderRadius: 16,
    marginBottom: 16,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 8,
    elevation: 3,
  },
  conditionHeader: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    marginBottom: 12,
  },
  conditionName: {
    fontSize: 18,
    fontWeight: '600',
    color: '#1E293B',
    flex: 1,
  },
  conditionProbability: {
    fontSize: 16,
    fontWeight: '700',
    color: '#0EA5E9',
    backgroundColor: '#EFF6FF',
    paddingHorizontal: 10,
    paddingVertical: 4,
    borderRadius: 8,
  },
  conditionDescription: {
    fontSize: 14,
    color: '#64748B',
    lineHeight: 20,
    marginBottom: 8,
  },
  conditionRecommendation: {
    fontSize: 14,
    color: '#059669',
    lineHeight: 20,
    fontWeight: '500',
  },
  recommendationsCard: {
    backgroundColor: '#F0FDF4',
    padding: 20,
    borderRadius: 16,
    marginBottom: 16,
    borderWidth: 1,
    borderColor: '#BBF7D0',
  },
  recommendationsTitle: {
    fontSize: 18,
    fontWeight: '600',
    color: '#166534',
    marginBottom: 12,
  },
  recommendationText: {
    fontSize: 14,
    color: '#166534',
    lineHeight: 20,
    marginBottom: 4,
  },
  warningCard: {
    backgroundColor: '#FEF2F2',
    padding: 20,
    borderRadius: 16,
    marginBottom: 16,
    borderWidth: 1,
    borderColor: '#FECACA',
  },
  warningTitle: {
    fontSize: 16,
    fontWeight: '600',
    color: '#DC2626',
    marginBottom: 12,
  },
  warningText: {
    fontSize: 14,
    color: '#DC2626',
    lineHeight: 20,
    marginBottom: 4,
  },
  consultationCard: {
    backgroundColor: '#EFF6FF',
    padding: 20,
    borderRadius: 16,
    borderWidth: 1,
    borderColor: '#DBEAFE',
  },
  consultationTitle: {
    fontSize: 18,
    fontWeight: '600',
    color: '#1E40AF',
    marginBottom: 8,
  },
  consultationText: {
    fontSize: 14,
    color: '#1E40AF',
    lineHeight: 20,
    marginBottom: 16,
  },
  consultButton: {
    backgroundColor: '#10B981',
    paddingVertical: 12,
    borderRadius: 8,
    alignItems: 'center',
  },
  consultButtonText: {
    color: '#FFFFFF',
    fontSize: 16,
    fontWeight: '600',
  },
});

export default MultilingualSymptomChecker;